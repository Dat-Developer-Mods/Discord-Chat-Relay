buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

group = 'com.datdeveloper'
version = '0.2.1'

java {
    archivesBaseName = 'discordchatrelay'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'stable', version: '39-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                discordchatrelay {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                discordchatrelay {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral() // for transitive dependencies
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'
    shadow('net.dv8tion:JDA:4.3+') {
        exclude module: 'opus-java'
    }
}

shadowJar {
    project.configurations.shadow.setTransitive(true)
    configurations = [project.configurations.shadow]

    relocate('org.apache', 'charrelay.org.apache') {
        exclude 'org/apache/logging/**'
    }
    relocate 'org.json', 'charrelay.org.json'
    relocate 'gnu.trove', 'charrelay.gnu.trove'
    relocate 'com.mashape.unirest', 'charrelay.com.mashape.unirest'
    relocate 'com.squareup', 'charrelay.com.squareup'
    relocate 'okio', 'charrelay.okio'
    relocate 'okhttp3', 'charrelay.okhttp3'
    relocate 'net.dv8tion', 'charrelay.net.dv8tion'
    relocate 'org.slf4j', 'charrelay.org.slf4j'
    relocate 'com.neovisionaries.ws.client', 'charrelay.com.neovisionaries.ws.client'

    relocate 'com.fasterxml.jackson', 'charrelay.com.fasterxml.jackson'
    dependencies {
        exclude(dependency('net.java.dev.jna:jna'))
    }
    exclude('module-info.class')

    classifier = null
}

build.dependsOn shadowJar

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "discordchatrelay",
                "Specification-Vendor"    : "jtljac",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "jtljac",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", "1.12.2"

    duplicatesStrategy DuplicatesStrategy.WARN

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':"1.12.2"
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = archivesBaseName
            version = version

            from components.java
        }
    }
}

reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}

jar.finalizedBy('reobfJar')